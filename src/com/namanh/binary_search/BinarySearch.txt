Binary Search is one of the most fundamental and useful algorithms in Computer Science. It describes the process of
searching for a specific value in an ordered collection.

When can we use binary search?
If we can discover some kind of monotonicity, for example, if condition(k) is True then condition(k + 1) is True,
then we can consider binary search.

Template: https://leetcode.com/discuss/general-discussion/786126/python-powerful-ultimate-binary-search-template-solved-many-problems

Index:      0 1 2 3 4 5 6 7 8 9
Condition:  F F F F F T T T T T
                    | |
               left-1 left

def condition(value) -> bool:
    pass

def binary_search(array) -> int:
    left, right = min(search_space), max(search_space)  -> could be [0, n-1], [0, n], [1, n] etc. Depends on problem
    while left < right:
        mid = left + (right - left) // 2
        if condition(mid):
            right = mid
        else:
            left = mid + 1
    return left

Rule 1:
Boundary variables left and right need to include all possible elements. Maybe set right = n or n + 1 to cover edge cases
(example array have 0 or 1 element)

Rule 2:
Decide return value. Is it return left or return left - 1? Remember this: after exiting the while loop, left is
the minimal k satisfying the condition function;

We should think about 3 edge cases:
    + [1,2] => low = 1, high = 2 and middle = 1
    + [2,1] => low = 2, high = 1 and middle = 2
    + [1,2,3] => low = 1, high = 3 and middle = 2
  What element you want to choose?
